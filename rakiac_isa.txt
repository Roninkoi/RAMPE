RAKIAC INSTRUCTION SET ARCHITECTURE
-----------------------------------

The RAKIAC ISA is a RISC-style, tiny architecture that
only has about 16 instructions. Everything has been designed 
to fit into 8 bits, from the registers to memory addresses.

REGISTERS:

size  name  purpose

8     a     accumulator, register 0 (00)
8     b     general purpose register 1 (01)
8     c     gpr 2 (10)
8     d     gpr 3 (11)

8     pc    program counter
8     ir    instruction register
8     mar   memory address register

MEMORY:

Unified memory for both data and program. 8-bit bytes,
single address holds a byte of data. Address space 2**8.

16 banks, 16 bytes per memory bank. Switch by sw instruction.
Bank stored in high register. Separate addressing for pc and mar.

total max:
256 bytes = 2048 bits

INSTRUCTIONS:

Load/store architecture, mostly Intel syntax.

Comments begin with ";", labels use ":". Comments and labels
are ignored, so they become nops if on an empty line. Operands
can be separated with "," e.g. "add a, b". Binary can be inserted
inside assembly programs, and this will get loaded directly to memory.

a = accumulator
al = accumulator low
pcl = program counter low
pch = program counter high

i  size = 8  mnemonic <args>   translation

system:
0 (8)        nop               ; idle (empty lines/comments)
1 (8)        hlt               ; stop execution
3 (8)        end               ; end of program (stops reading)
4 (8)        out               ; outputs/prints the value of a

8  (8)       atm               ; acc to mar
9  (8)       mta               ; mar to acc
10 (8)       atp               ; acc to pc
11 (8)       pta               ; pc to acc
12 (8)       lda               ; load address (data to acc)
13 (8)       sta               ; store address (acc to data)
14 (8)       inc               ; increment accumulator
15 (8)       dec               ; decrement accumulator

flow:
16 (4, 4)    sw <bank>         ; pch, marh = bank
17 (4, 4)    jmp <address>     ; pcl = address
18 (4, 4)    jez <address>     ; if a == 0, pcl = address
19 (4, 4)    jlz <address>     ; if a < 0, pcl = address

memory:
20 (4, 2, 2) mov <reg1> <reg2> ; reg1 = reg2
21 (4, 4)    sto <address>     ; address = a
22 (4, 4)    ld <address>      ; a = address
23 (4, 4)    ldi <val>         ; al = val

logic:
24 (4, 2, 0) not <reg>         ; a = not(reg)
25 (4, 2, 2) and <reg1> <reg2> ; a = and(reg1, reg2)
26 (4, 2, 2) or <reg1> <reg2>  ; a = or(reg1, reg2) 
27 (4, 2, 2) xor <reg1> <reg2> ; a = xor(reg1, reg2)

math:
28 (4, 2, 2) add <reg1> <reg2> ; a = reg1 + reg2
29 (4, 2, 2) sub <reg1> <reg2> ; a = reg1 - reg2
30 (4, 2, 2) sh <r=0/l=1> <val>  ; a = sh(a, val + 1)

assembler:
<label>: ; label
shr <val>
    sh 0, val
shl <val>
    sh 1, val

MACHINE CODES:

0000 0000 nop
0000 0001 hlt
0000 0010 end
0000 0011 out

0000 1000 atm
0000 1001 mta
0000 1010 atp
0000 1011 pta
0000 1100 lda
0000 1101 sta
0000 1110 inc
0000 1111 dec

0001 sw
0010 jmp
0011 jez
0100 jlz

0101 mov
0110 sto
0111 ld
1000 ldi

1001 not
1010 and
1011 or
1100 xor

1101 add
1110 sub
1111 sh

