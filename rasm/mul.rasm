in ; read first operand
mov b, a
in ; read second operand
mov c, a

la return
mov d, a ; load return address and put into d
ja mul ; jump to subroutine mul

return: mov a, b ; return from mul
out
hlt

mulreturn: nop ; memory location for return address
; multiply b * c, return to d with result in b
mul: jez b, d ; either operand zero
jez c, d
std mulreturn ; save return address
mov d, b ; d is counter
xor b, b
mulloop: add b, c ; repeated addition of c
mov a, d ; decrement d
dec
mov d, a
lda mulreturn ; load return address
jez d, a ; return?
ja mulloop ; add again

